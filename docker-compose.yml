services:
  db:
    image: postgres:latest
    env_file: .env
    volumes:
      - postgres:/var/lib/postgresql/data
    ports:
      - 5432:5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - barev
    restart: always

  elasticsearch:
    image: elasticsearch:7.9.1
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elastic_data:/usr/share/elasticsearch/data/
      - ./elk-config/elasticsearch/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
    env_file:
      - .env
    networks:
      - elk
    healthcheck:
      test: curl -s http://0.0.0.0:9200 >/dev/null || exit 1
      interval: 30s
      timeout: 10s
      retries: 50


  logstash:
    image: logstash:7.9.1
    ports:
      - "5044:5044"
      - "9600:9600"
    volumes:
      - ./elk-config/logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
      - ./elk-config/logstash/logstash.yml:/usr/share/logstash/config/logstash.yml
      - ls_data:/usr/share/logstash/data
    networks:
      - elk
    depends_on:
      elasticsearch:
        condition: service_healthy

  kibana:
    image: kibana:7.9.1
    ports:
      - "${KIBANA_PORT}:${KIBANA_PORT}"
    volumes:
      - ./elk-config/kibana/kibana.yml:/usr/share/kibana/config/kibana.yml
      - kb_data:/usr/share/kibana/data
    networks:
      - elk
    depends_on:
      elasticsearch:
        condition: service_healthy

  ganache:
    build:
      context: .
      dockerfile: ./docker/Dockerfile.ganache
    stop_grace_period: 5s
    env_file: .env
    volumes:
      - ganache:/data
    ports:
      - ${GANACHE_PORT}:${GANACHE_PORT}
    networks:
      - barev
    restart: always

  blockchain:
    build:
      context: .
      dockerfile: ./docker/Dockerfile.blockchain
    stop_grace_period: 5s
    env_file: .env
    volumes:
      - ./blockchain:/app
    ports:
      - ${BLOCKCHAIN_PORT}:${BLOCKCHAIN_PORT}
    networks:
      - barev
      - elk
    depends_on:
      ganache:
        condition: service_started
      logstash:
        condition: service_started
      kibana:
        condition: service_started
      elasticsearch:
        condition: service_healthy
      db:
        condition: service_healthy
    restart: always

  user_auth:
    build:
      context: .
      dockerfile: docker/Dockerfile.user_auth
    env_file: .env
    stop_grace_period: 5s
    volumes:
      - ./user_auth:/app
    ports:
      - "${USER_AUTH_PORT}:${USER_AUTH_PORT}"
    networks:
      - barev
      - elk
    depends_on:
      logstash:
        condition: service_started
      kibana:
        condition: service_started
      elasticsearch:
        condition: service_healthy
      db:
        condition: service_healthy
    restart: always

  frontend:
    build:
      context: .
      dockerfile: docker/Dockerfile.frontend
    env_file: .env
    stop_grace_period: 5s
    volumes:
      - ./frontend:/app
    ports:
      - "${FRONTEND_PORT}:${FRONTEND_PORT}"
    networks:
      - elk
      - barev
    depends_on:
      user_auth:
        condition: service_started
      logstash:
        condition: service_started
      kibana:
        condition: service_started
      elasticsearch:
        condition: service_healthy
      db:
        condition: service_healthy
    restart: always

volumes:
  postgres:
  ganache:
  elastic_data:
  ls_data:
  kb_data:

networks:
  barev:
    driver: bridge
  elk:
    driver: bridge
